// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model supportTeam {
  Id  Int @id @default(autoincrement())
  firstName String
  lastName  String
  nationality String
  email String @unique
  tel1 String @unique
  tel2 String?

  profileImage String?

  password String

  registeredAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountActive Boolean @default(false)

}

model Talent {
  talentId  Int @id @default(autoincrement())
  firstName String
  lastName  String
  nationality String
  dob DateTime

  email String @unique
  tel1 String @unique
  tel2 String?

  nok_firstName String
  nok_lastName String
  nok_relationship String
  nok_tel1 String
  nok_tel2 String?
  nok_email String?
  profileImage String?

  primaryPosition String
  secondaryPosition String?
  educationLevel String?
  category String?
  password String

  isVerified Boolean @default(false)
  areDocumentsVerified Boolean @default(false)

  preferredFoot String?
  currentPlayerStatus String?

  registeredAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountActive Boolean @default(true)

  @@map("Talents")
}

model Scout {
  scoutId Int @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  tel1 String  @unique
  tel2 String?
  nationality String
  profileImage String?
  isVerified Boolean @default(false)
  areDocumentsVerified Boolean @default(false)
  registeredAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accountActive Boolean @default(true)

  @@map("Scouts")
}

model TalentInquiries {
  inquiryId Int  @id @default(autoincrement())
  scoutId Int 
  talentIds  Int[]
  notes String @db.Text
  inquiryResponse String @db.Text
  isRespondedTo Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Issues {
  issueId Int @id @default(autoincrement())
  reporterId Int 
  category String
  title  String
  description String @db.Text
  supportResponse String? @db.Text
  isSolved Boolean @default(false)
  reportedAt DateTime @default(now())
  solvedAt DateTime? 
  solvedBy Int?
}

model scheduledMediaDays {
  mediaDayId Int @id @default(autoincrement())
  talentId Int
  scheduledDate DateTime?
}

model talentMedia {
  talentId Int @id @default(autoincrement())
  mediaUrl String
  reportedAt DateTime @default(now())
}

model talentReport {
  reportId  Int @id @default(autoincrement())
  talentId Int
  description String @db.Text
}

model events {
  eventId Int @id @default(autoincrement())
  thumbnail String
  eventTitle String
  description String @db.Text
  eventDate DateTime
  location String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model articles {
  articleId Int @id @default(autoincrement())
  thumbnail String
  title String
  content String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model successStories {
  storyId Int @id @default(autoincrement())
  talentId Int
  thumbnail String
  title String
  content String @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model partners {
  partnerId  Int @id @default(autoincrement())
  thumbnail String
  name String
}